{"version":3,"sources":["main.js","controllers/about.controller.js","controllers/account.controller.js","controllers/editevent.controller.js","controllers/event.controller.js","controllers/example.controller.js","controllers/home.controller.js","controllers/navigation.controller.js","controllers/newevent.controller.js","controllers/verification.controller.js","directives/backImg.directive.js","directives/datepicker.directive.js","directives/discussion.directive.js","directives/dropdown.directive.js","directives/form.directive.js","directives/poll.directive.js","filters/elapsed.filter.js","services/communicator.service.js","services/modal.service.js","services/notification.service.js","templates.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","$locationProvider","html5Mode","otherwise","$injector","$location","get","go","state","url","templateUrl","controller","factory","$resource","id","update","method","verify","destroy","set","title","document","Title","$scope","ConfirmModal","showNotice","$http","$state","$timeout","Event","Notification","params","event","data","master","copy","e","$watch","value","undoChanges","didChange","JSON","stringify","didChangeDates","dates","submit","form","$valid","message","confirmText","isDestructive","confirm","participants","type","Communicator","isDeleted","trigger","eventUrl","href","_id","absolute","openEvent","isClosed","cancelText","closeEvent","editEvent","date","Date","i","push","add","Math","ceil","random","days","toISOString","examplesNames","examples","length","example","name","votes","j","answer","creator","email","allowNotifications","location","description","emails","comments","author","content","isExample","$save","newEvent","$rootScope","$document","isActive","path","clickHandler","isClickedElementChildOfPopup","element","find","target","console","log","toggleMenu","$on","removeClass","unbind","hasClass","addClass","bind","then","code","timeout","directive","scope","attrs","backImg","css","background-image","restrict","require","model","control","link","el","ngModel","newValue","$setViewValue","$validate","$validators","required","modelValue","viewValue","setMonth","toDate","startDate","activeDate","clone","moveToFirstDayOfMonth","startDateDOW","getDay","toString","Array","isOutsideMonth","getMonth","isToday","equals","today","selectDay","dayObj","index","splice","inserted","undefined","compare","parse","returnIndex","modelDate","getDate","getYear","nextMonth","months","prevMonth","removeDate","Comment","controllerAs","comment","participant","this","deleteComment","remove","cid","postComment","commentForm","scrollToBottom","$setPristine","thread","scrollTop","prop","open","toggle","service","emailRegexString","emailRegex","RegExp","prettyError","errors","field","pattern","maxlength","FormHelper","$watchCollection","deleteEvent","delete","DatePickerService","dateService","init","deregister","unsetDate","$viewChangeListeners","$modelValue","$parsers","time","$isEmpty","$render","Participant","defaults","didVote","pid","edit","indexOf","cancel","save","formnew","discussionCtrl","datesCount","$promise","isTopDate","count","selectedDate","filter","$filter","minutes","hours","timeNow","getTime","seconds","floor","$emit","apply","arguments","mixpanel","track","btfModal","modal","deactivate","activate","close","run","$templateCache","put"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('rallly', ['ui.router','ngResource','btford.modal','ngTagsInput','ngAnimate','ngSanitize'])\n    .config(function($stateProvider, $urlRouterProvider, $locationProvider){\n        $locationProvider.html5Mode(true);\n        $urlRouterProvider.otherwise(function($injector, $location){\n            var $state = $injector.get('$state');\n            $state.go('notfound');\n        });\n        $stateProvider\n        .state('newevent',{\n            url : '/new',\n            templateUrl : 'templates/newevent.html',\n            controller : 'NewEventCtrl',\n        })\n        .state('deletedevent',{\n            templateUrl : 'templates/deletedevent.html',\n        })\n        .state('newevent.success', {\n            templateUrl : 'templates/newEvent/success.html'\n        })\n        .state('about', {\n            url : '/about',\n            templateUrl : 'templates/about.html',\n            controller : 'AboutCtrl'\n        })\n        .state('example', {\n            url : '/example',\n            controller : 'ExampleCtrl'\n        })\n        .state('notfound', {\n            templateUrl : 'templates/notfound.html'\n        })\n        .state('event',{\n            url : '/:id',\n            templateUrl : 'templates/event.html',\n            controller : 'EventCtrl'\n        })\n        .state('editevent', {\n            url: '/:id/edit',\n            templateUrl : 'templates/editevent.html',\n            controller : 'EditEventCtrl'\n        })\n        .state('verifyevent', {\n            url : '/verify/:id/code/:code',\n            controller : 'VerificationCtrl'\n        })\n        .state('deleteevent', {\n            url : '/delete/:id/code/:code',\n            controller : 'DeletionCtrl'\n        })\n    })\n    .factory('Event', function($resource){\n        return $resource('/api/event/:id', { id : '@_id' }, {\n            'update' : { method : 'PUT' },\n            'verify' : { method : 'GET', url : '/api/event/:id/code/:code' },\n            'destroy': { method : 'DELETE', url: '/api/event/:id/code/:code' }\n        });\n    })\n    .factory('Participant', function($resource){\n        return $resource('/api/event/:id/participant/:pid', { id: '@_id'}, {\n            'update' : { method : 'PUT' }\n        });\n    })\n    .factory('Comment', function($resource){\n        return $resource('/api/event/:id/comment/:cid', { id : '@_id' }, {\n            'update' : { method : 'PUT' }\n        })\n    })\n    .factory('Title', function(){\n        return {\n            set : function(title){\n                document.title = title;\n            }\n        }\n    });\n","angular.module('rallly')\n.controller('AboutCtrl', function(Title){\n    Title.set('About Rally')\n});\n","angular.module('rallly')\n.controller('AccountCtrl', function($scope, ConfirmModal){\n    $scope.showNotice = function(){\n        \n    }\n})\n","angular.module('rallly')\n.controller('EditEventCtrl', function($scope, $http, $state, $timeout, Event, ConfirmModal, Notification, Title){\n    var id = $state.params.id\n    $scope.event = Event.get({id:id}, function(data){\n        Title.set(\"Edit: \" + $scope.event.title);\n        $scope.master = angular.copy($scope.event);\n    }, function(e){\n        $state.go('notfound');\n    });\n    $scope.$watch('event.isDeleted', function(value){\n        if (value){\n            $state.go('deletedevent');\n        }\n    });\n    $scope.undoChanges = function(){\n        $scope.event = angular.copy($scope.master);\n    }\n    $scope.didChange = function(){\n        return JSON.stringify($scope.master) != JSON.stringify($scope.event);\n    }\n    $scope.didChangeDates = function(){\n        return JSON.stringify($scope.master.dates) != JSON.stringify($scope.event.dates);\n    }\n    $scope.submit = function(){\n        if ($scope.form.$valid){\n            if ($scope.didChangeDates() ){\n                var modal = new ConfirmModal({\n                    title : 'Hold up!',\n                    message : 'Changing the dates will reset all entries by the participants. Are you sure you want to do that?',\n                    confirmText : 'Yes, I\\'m sure',\n                    isDestructive : true,\n                    confirm : function(){\n                        $scope.event.participants = [];\n                        update();\n                    }\n                });\n\n            } else {\n                update();\n            }\n        } else {\n            var notification = new Notification({\n                title : 'Not so fast',\n                message : 'Make sure you fill in all the required fields and try again.',\n                type : 'error'\n            });\n        }\n    }\n    var update = function(){\n        Event.update({\n            id : id\n        }, $scope.event,\n        function(){\n            var notification = new Notification({\n                title : 'Changes Saved',\n                message : 'Your changes have been saved successfully.',\n                type : 'success'\n            });\n            $scope.master = angular.copy($scope.event);\n        });\n    }\n});\n","angular.module('rallly')\n.controller('EventCtrl', function($scope, $http, $state, Title, Event, ConfirmModal, Communicator){\n\n    var id = $state.params.id;\n    // Get Event\n    $scope.event = Event.get({id:id}, function(data){\n        // Set the page title to the event title\n        if (data.isDeleted) {\n            $state.go('deletedevent');\n            return;\n        }\n        \n        Communicator.trigger('view:event', data);\n\n        Title.set($scope.event.title);\n        // Generate event url - i.e. http://rallly.co/jF9F_Fd\n        $scope.eventUrl = $state.href('event', {\n            id: $scope.event._id\n        }, {\n            absolute : true\n        });\n    }, function(e){\n        $state.go('notfound');\n    });\n\n    $scope.openEvent = function(){\n        $scope.event.isClosed = false;\n        Event.update({\n            id : id\n        }, $scope.event,\n        function(){\n            var modal = new ConfirmModal({\n                title : 'Event Open',\n                message : 'People can vote and comment on this event.',\n                cancelText : 'OK',\n            });\n        });\n    }\n\n    $scope.closeEvent = function(){\n        $scope.event.isClosed = true;\n        Event.update({\n            id : id\n        }, $scope.event,\n        function(){\n            var modal = new ConfirmModal({\n                title : 'Event Closed',\n                message : 'People can no longer vote or comment on this event.',\n                cancelText : 'OK',\n            });\n        });\n    }\n\n    $scope.editEvent = function(){\n        $state.go('editevent', { id : $scope.event._id });\n    }\n\n});\n","angular.module('rallly')\n.controller('ExampleCtrl', function($state, Event){\n    // Generate dates\n\n    var dates = [], date = new Date();\n    for (var i = 0; i < 4; i++){\n        dates.push(date.add(Math.ceil(Math.random() * 5)).days().toISOString());\n    }\n    // Generate Participants\n    var examplesNames = ['John Example', 'Jane Specimen','Mark Instance', 'Mary Case'];\n    var examples = [];\n    for (var i = 0; i < examplesNames.length; i++){\n        var example = { name : examplesNames[i] };\n        example.votes = [];\n        for (var j = 0; j <  dates.length; j++){\n            var answer = Math.random()<.5;\n            example.votes[j] = answer;\n        }\n        examples.push(example);\n    }\n    var event =  new Event({\n        \"creator\": {\n         \"name\": \"John Example\",\n         \"email\": \"rallly@lukevella.com\",\n         \"allowNotifications\" : false\n        },\n        \"title\": \"Lunch Meeting\",\n        \"location\": \"Starbucks, 901 New York Avenue\",\n        \"description\": \"This event has been automatically generated just for you! Feel free to try out all the different features and when you're ready, you can schedule a new event.\",\n        \"dates\" : dates,\n        \"participants\" : examples,\n        \"emails\": [],\n        \"comments\" : [{\n            author : {\n                name : \"John Example\"\n            },\n            content : \"Hey guys, this is a comment!\"\n        }, {\n            author : {\n                name : \"Mark Instance\"\n            },\n            content : \"Hi John... nice comment. Keep up the great work!\"\n        }, {\n            author : {\n                name : \"John Example\"\n            },\n            content : \"Thank you!\"\n        }],\n        \"isExample\" : true\n    });\n    event.$save(function(data){\n        $state.go('event', { id : data._id }, {\n            location : \"replace\"\n        });\n    })\n});\n","angular.module('rallly')\n.controller('HomeCtrl', function($scope, $state, Title){\n    Title.set('Rallly - Collaborative Scheduling')\n\n    $scope.newEvent = function(){\n        $state.go('newevent');\n    }\n});\n","angular.module('rallly')\n.controller('NavigationCtrl', function($scope, $rootScope, $location, $document){\n    $scope.isActive = function(path) {\n        if ($location.path() == path) {\n            return true;\n        } else {\n            return false\n        }\n    }\n\n\n\n    var clickHandler = function(event){\n        var isClickedElementChildOfPopup = angular.element('.mobile-navigation').find(event.target).length > 0;\n        console.log(isClickedElementChildOfPopup);\n        if (isClickedElementChildOfPopup) return;\n        $scope.toggleMenu()\n    }\n\n    $rootScope.$on('$stateChangeSuccess', function(){\n        angular.element('body').removeClass('open-menu');\n        $document.unbind('click', clickHandler);\n    });\n\n    $scope.toggleMenu = function(){\n        console.log('click');\n        var isOpen = angular.element('body').hasClass('open-menu');\n        if (isOpen) {\n            angular.element('body').removeClass('open-menu');\n            $document.unbind('click', clickHandler);\n        } else {\n            angular.element('body').addClass('open-menu');\n            $document.bind('click', clickHandler);\n        }\n    }\n\n\n})\n","angular.module('rallly')\n.controller('NewEventCtrl', function($scope, $http, $state, Event, ConfirmModal, Notification, Communicator){\n\n    $scope.title = \"Schedule a New Event\";\n    $scope.description = \"Fill in the form below to create your event and share it with your friends and colleagues.\";\n    $scope.event = { creator : {\n        allowNotifications : true\n    }};\n\n\n    $scope.submit = function(){\n        if ($scope.form.$valid){\n            var newEvent = new Event($scope.event);\n            newEvent.$save()\n            .then(function(event){\n                $scope.event = event;\n                $scope.eventUrl = $state.href('event', {\n                    id: $scope.event._id\n                }, {\n                    absolute : true\n                });\n                Communicator.trigger('add:event', event);\n                $state.go('newevent.success');\n            }, function(){\n                var modal = new ConfirmModal({\n                    title : 'Uh oh!',\n                    message : 'There was an error creating your event. Please try again later.',\n                    cancelText : 'OK'\n                });\n            });\n        } else {\n            var notification = new Notification({\n                title : 'Hold on!',\n                message : 'Make sure you fill in all the required fields and that your data is correct.'\n            });\n        }\n    }\n\n});\n","angular.module('rallly')\n.controller('VerificationCtrl', function(Event, Notification, $state){\n    Event.verify({id : $state.params.id, code :$state.params.code}, function(){\n        var notification = new Notification({\n            title : 'Email Verified',\n            message : 'Your email has been verified. You will now be able to receive email notifications for this event',\n            type : 'success',\n            timeout : 5000\n        });\n    }, function(e){\n        var notification = new Notification({\n            title : 'Verification Failed',\n            message : 'Your verification code has expired.',\n            type : 'error'\n        });\n    });\n    $state.go('event', { id : $state.params.id }, {\n        location : \"replace\"\n    });\n\n});\n","angular.module('rallly')\n.directive('backImg', function(){\n    return function(scope, element, attrs){\n        var url = attrs.backImg;\n        element.css({\n            'background-image': 'url(/images/' + url +'.png)'\n        });\n    };\n})\n","angular.module('rallly')\n.directive('datepicker', function(){\n    return {\n        restrict : 'A',\n        require : 'ngModel',\n        scope : {\n            model : '=ngModel',\n            control : '='\n        },\n        templateUrl: 'templates/directives/datePicker.html',\n        link : function(scope, el, attrs, ngModel){\n            scope.model = scope.model || [];\n            scope.control = scope.control || {};\n\n            scope.$watch('model', function(newValue){\n                ngModel.$setViewValue(newValue);\n                ngModel.$validate();\n            }, true);\n\n            ngModel.$validators.required = function(modelValue, viewValue){\n                if (!modelValue || modelValue.length == 0){\n                    return false;\n                }\n                return true;\n            }\n\n            var today = Date.today(), activeDate = today.clone();\n            var setMonth = function(toDate){\n                activeDate = toDate;\n                var startDate = activeDate.clone().moveToFirstDayOfMonth(), // get first day of active month\n                    startDateDOW = startDate.getDay(); // get day of the week for the active start date of the active month\n                // Set the startDate to the previous Sunday\n                if (startDateDOW == 0){\n                    startDate.add(-7).days();\n                } else {\n                    startDate.add(startDateDOW * -1).days();\n                }\n                scope.title = activeDate.toString('MMMM yyyy');\n                var days = new Array(42);\n                for (var i = 0; i < days.length; i++){\n                    var date = startDate.clone().add(i).days()\n                    days[i] = {\n                        date : date,\n                        isOutsideMonth : (date.getMonth() != activeDate.getMonth()) ? true : false,\n                        isToday : (Date.equals(date, today))\n                    }\n                }\n                scope.days = days;\n            }\n            setMonth(activeDate);\n            scope.selectDay = function(dayObj){\n                if (dayObj.isOutsideMonth) {\n                    setMonth(dayObj.date);\n                }\n                if ((index = scope.isActive(dayObj.date, true)) != -1) {\n                    // Already selected\n                    scope.model.splice(index, 1); // remove\n                } else {\n                    // Not selected\n                    var index = 0, inserted = false;\n                    do {\n                        if (scope.model[index] == undefined || Date.compare(Date.parse(scope.model[index]), dayObj.date) > 0){\n                            scope.model.splice(index, 0, dayObj.date);\n                            inserted = true;\n                        }\n                        index++;\n                    } while (inserted == false);\n                }\n            }\n            scope.isActive = function(date, returnIndex){\n                scope.model = scope.model || [];\n                for (var i = 0; i < scope.model.length; i++){\n                    var modelDate = Date.parse(scope.model[i]);\n                    if (modelDate.getDate() == date.getDate() &&\n                        modelDate.getMonth() == date.getMonth() &&\n                        modelDate.getYear() == date.getYear()){\n                        return (returnIndex) ? i : true;\n                    }\n                }\n                return (returnIndex) ? -1 : false;\n            }\n            scope.nextMonth = function(){\n                setMonth(activeDate.clone().add(1).months());\n            }\n            scope.prevMonth = function(){\n                setMonth(activeDate.clone().add(-1).months());\n            }\n\n            scope.control.removeDate = function(date){\n                if ((index = scope.isActive(Date.parse(date), true)) != -1) {\n                    scope.model.splice(index, 1)\n                }\n            }\n        }\n    }\n});\n","angular.module('rallly')\n.directive('discussion', function($timeout, Comment, ConfirmModal, Communicator){\n    return {\n        restrict : 'A',\n        templateUrl : 'templates/directives/discussion.html',\n        scope : {\n            'event' : '='\n        },\n        controllerAs : 'discussionCtrl',\n        controller : function($scope, $rootScope){\n            $scope.comment = { author : {}, comment : '' };\n            $rootScope.$on('add:participant', function(e, event, participant){\n                $scope.comment.author.name = participant.name;\n            });\n            this.deleteComment = function(comment){\n                var modal = new ConfirmModal({\n                    title : 'Are you sure?',\n                    message : 'Are you sure you want to remove this comment?',\n                    confirmText : 'Yes - delete',\n                    cancelText : 'No - nevermind',\n                    isDestructive : true,\n                    confirm : function(){\n                        Comment.remove({ id : $scope.event._id , cid : comment._id }, function(event){\n                            $scope.event = event;\n                        });\n                    }\n                });\n            }\n            this.postComment = function(){\n                if ($scope.commentForm.$valid){\n                    var comment = new Comment($scope.comment);\n                    comment.$save({id:$scope.event._id}, function(event){\n                        $scope.event = event;\n                        Communicator.trigger('add:comment', event, $scope.comment);\n                        $scope.comment.content = '';\n                        $timeout($scope.scrollToBottom);\n                    });\n                    $scope.commentForm.$setPristine();\n                }\n            }\n            $scope.scrollToBottom = function(){\n                var thread = angular.element('.comment-thread');\n                thread.scrollTop(thread.prop('scrollHeight'));\n            }\n        },\n        link : function(scope, el, attrs){\n            $timeout(scope.scrollToBottom);\n        }\n    }\n});\n","angular.module('rallly')\n.directive('dropdown', function($document){\n    return {\n        restrict : 'A',\n        link : function(scope, el, attrs){\n            el.addClass('dropdown');\n            scope.open = false;\n\n            var clickHandler = function(event){\n                var isClickedElementChildOfPopup = el.find(event.target).length > 0;\n                if (isClickedElementChildOfPopup) return;\n                scope.toggle();\n            }\n\n            scope.toggle = function(){\n                scope.open = !scope.open;\n                if (scope.open){\n                    el.addClass('open');\n                    $document.bind('click', clickHandler);\n                } else {\n                    el.removeClass('open');\n                    $document.unbind('click', clickHandler);\n                }\n            }\n        }\n    }\n});\n","angular.module('rallly')\n.service('FormHelper', function(){\n    this.emailRegexString = '^([\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4})?$';\n    this.emailRegex = new RegExp(this.emailRegexString);\n    this.prettyError = function(errors, field){\n        if (errors.required) return field + \" is required\";\n        if (errors.pattern) return field + \" is invalid\" ;\n        if (errors.maxlength) return field + \" is too long\";\n        return false;\n    }\n})\n.directive('userForm', function(FormHelper){\n    return {\n        scope : {\n            event : '=',\n            form : '='\n        },\n        templateUrl : 'templates/form/userForm.html',\n        link : function(scope, el, attrs) {\n            scope.errors = {};\n\n            scope.emailRegex = FormHelper.emailRegex;\n\n            scope.$watchCollection('form.name.$error',function(errors){\n                scope.errors.name = FormHelper.prettyError(errors, \"Name\");\n            });\n\n            scope.$watchCollection('form.email.$error',function(errors){\n                scope.errors.email = FormHelper.prettyError(errors, \"Email\");\n            });\n        }\n    }\n})\n.directive('eventForm', function(FormHelper){\n    return {\n        scope : {\n            event : '=',\n            form : '='\n        },\n        templateUrl : 'templates/form/eventForm.html',\n        link : function(scope, el, attrs) {\n            scope.errors = {};\n\n            scope.$watchCollection('form.title.$error',function(errors){\n                scope.errors.title = FormHelper.prettyError(errors, \"Title\");\n            });\n\n            scope.$watchCollection('form.location.$error',function(errors){\n                scope.errors.location = FormHelper.prettyError(errors, \"Location\");\n            });\n\n        }\n    }\n})\n.directive('dateForm', function(){\n    return {\n        scope : {\n            event : '=',\n            form : '='\n        },\n        templateUrl : 'templates/form/dateForm.html'\n    }\n})\n.directive('participantsForm', function(FormHelper){\n    return {\n        scope : {\n            event : '=',\n            form : '='\n        },\n        templateUrl : 'templates/form/participantsForm.html',\n        link : function(scope, el, attrs){\n            scope.emailRegex = FormHelper.emailRegexString;\n        }\n    }\n})\n.directive('settingsForm', function(Event, ConfirmModal){\n    return {\n        scope : {\n            event : '=',\n            form : '='\n        },\n        templateUrl : 'templates/form/settingsForm.html',\n        link : function(scope, el, attrs){\n            scope.deleteEvent = function(){\n                var modal = new ConfirmModal({\n                    title : 'Are you sure?',\n                    message : 'The event will no longer be accessible after it is deleted. Are you sure you want to continue?',\n                    isDestructive : true,\n                    confirmText : 'Yes - delete',\n                    cancelText : 'Cancel',\n                    confirm : function(){\n                        Event.delete({'id' : scope.event._id}, function(e){\n                            scope.event.isDeleted = true;\n                        });\n                    }\n                });\n            }\n        }\n    }\n})\n.directive('switchToggle', function(){\n    return {\n        scope : {\n            model : '=ngModel'\n        },\n        require : 'ngModel',\n        link : function(scope, el, attrs, ngModel) {\n            el.addClass('switch-toggle');\n            var setClass = function(){\n                if (scope.model ^ typeof(attrs.invert) !== 'undefined'){\n                    el.addClass('active');\n                } else {\n                    el.removeClass('active');\n                }\n            }\n            scope.$watch('model', setClass);\n            el.bind('click', function(e){\n                scope.model = !scope.model;\n                ngModel.$setViewValue(scope.model, e);\n            });\n        }\n    }\n})\n.directive('timeForm', function(DatePickerService){\n    return {\n        scope : {\n            event : '=',\n            form : '='\n        },\n        templateUrl : 'templates/form/timeForm.html',\n        link : function(scope, el, attrs){\n            var init = false;\n            var dateService;\n            var deregister = scope.$watch('event.dates', function(value){\n                if (value && !init) {\n                    deregister();\n                }\n                init = true;\n                dateService = new DatePickerService(scope.event.dates);\n                scope.unsetDate = function(date){\n                    dateService.removeDate(date);\n                }\n            });\n        }\n    }\n})\n.directive('timePicker', function($timeout){\n    return {\n        scope : {\n            model : '=ngModel'\n        },\n        require : 'ngModel',\n        link : function(scope, el, attrs, ngModel){\n            ngModel.$viewChangeListeners.push(function(){\n                scope.model = ngModel.$modelValue;\n            });\n\n            ngModel.$parsers.push(function (value) {\n                if (!value) return;\n                return Date.parse(value);\n            });\n\n            ngModel.$validators.time = function(modelValue, viewValue){\n                if (ngModel.$isEmpty(modelValue)) return true;\n                var time = Date.parse(modelValue);\n                if (time) {\n                    ngModel.$setViewValue(time.toString(\"hh:mm tt\"));\n                    ngModel.$render();\n                    return true;\n                }\n                return false;\n            }\n        }\n    }\n});\n","angular.module('rallly')\n.directive('poll', function($timeout, Participant, ConfirmModal, Communicator){\n    return {\n        restrict : 'A',\n        templateUrl : 'templates/directives/poll.html',\n        $scope : {\n            'event' : '='\n        },\n        controllerAs : 'pollCtrl',\n        controller : function($scope, $rootScope){\n\n            $scope.defaults = [];\n            $scope.participant = {votes: []};\n            $rootScope.$on('add:comment', function(e, event, comment){\n                // Don't repopulate field if user has already voted\n                if (!$scope.didVote) {\n                    $scope.participant.name = comment.author.name;\n                }\n            });\n            this.delete = function(participant){\n                var modal = new ConfirmModal({\n                    title : 'Delete ' + participant.name + '?',\n                    message : 'Are you sure you want to remove '+participant.name+' from the poll?',\n                    confirmText : 'Yes - delete',\n                    cancelText : 'No - nevermind',\n                    isDestructive : true,\n                    confirm : function(){\n                        Participant.remove({ id : $scope.event._id , pid : participant._id }, function(event){\n                            $scope.event = event;\n                            Communicator.trigger('delete:participant', event);\n                        });\n                    }\n                });\n            }\n            this.update = function(participant){\n                Participant.update({\n                    id : $scope.event._id,\n                    pid : participant._id\n                }, participant);\n            }\n            this.edit = function(participant){\n                $scope.defaults[$scope.event.participants.indexOf(participant)] = angular.copy(participant);\n            }\n            this.cancel = function(index){\n                $scope.event.participants[index] = $scope.defaults[index];\n            }\n            this.save = function(){\n                if ($scope.formnew.$valid){\n                    var participant = new Participant($scope.participant);\n                    participant.$save({id:$scope.event._id}, function(event){\n                        $scope.event = event;\n                        $scope.didVote = true;\n                        Communicator.trigger('add:participant', event, $scope.participant);\n                        $scope.participant = {votes: []};\n                    });\n                    $scope.formnew.$setPristine();\n                }\n            }\n        },\n        link : function(scope, el, attrs, discussionCtrl){\n            var datesCount = [];\n\n            scope.event.$promise.then(function(event){\n                const examplesNames = ['Calico Jack', 'Pegleg Pete',  'Anne Bonny', 'William Kidd'];\n                var examples = [];\n                for (var i = 0; i < examplesNames.length; i++){\n                    var example = { name : examplesNames[i] };\n                    example.votes = [];\n                    for (var j = 0; j <  event.dates.length; j++){\n                        var answer = Math.random()<.5;\n                        example.votes[j] = answer;\n                    }\n                    examples.push(example);\n                }\n                scope.examples = examples;\n            })\n\n            scope.isTopDate = function(index){\n                var count = datesCount[index];\n                for (var i = 0; i < datesCount.length; i++){\n                    if (datesCount[i] > count) return false;\n                }\n                return true;\n            }\n\n            scope.selectedDate = function(index){\n                datesCount[index] = 0;\n                for (var i = 0; i < scope.event.participants.length; i++){\n                    if (scope.event.participants[i].votes[index]) datesCount[index]++;\n                }\n                return datesCount[index];\n            }\n        }\n    }\n});\n","angular.module('rallly')\n.filter('elapsed', function($filter){\n    return function(date){\n        if (!date) return;\n        var time = Date.parse(date),\n            timeNow = new Date().getTime(),\n            difference = timeNow - time,\n            seconds = Math.floor(difference / 1000),\n            minutes = Math.floor(seconds / 60),\n            hours = Math.floor(minutes / 60),\n            days = Math.floor(hours / 24);\n        if (days > 30) {\n            return 'on ' + $filter('date')(date, 'MMMM d');\n        } else if (days > 1) {\n            return days + \" days ago\";\n        } else if (days == 1) {\n            return \"1 day ago\"\n        } else if (hours > 1) {\n            return hours + \" hours ago\";\n        } else if (hours == 1) {\n            return \"an hour ago\";\n        } else if (minutes > 1) {\n            return minutes + \" minutes ago\";\n        } else if (minutes == 1){\n            return \"a minute ago\";\n        } else {\n            return \"a few seconds ago\";\n        }\n    }\n})\n","angular.module('rallly')\n.factory('Communicator', function($rootScope){\n    return new (function(){\n        this.trigger = function(){\n            $rootScope.$emit.apply($rootScope, arguments);\n        }\n        $rootScope.$on('view:event',function(e, data){\n            mixpanel.track('View Event', {\n                id : data._id,\n                participants : data.participants.length,\n                comments  : data.comments.length,\n                isExample : data.isExample,\n                dates : data.dates.length\n            });\n        })\n\n        $rootScope.$on('add:participant', function(e, event, participant){\n            mixpanel.track('Add Participant', {\n                id : event._id\n            })\n        })\n\n        $rootScope.$on('add:comment', function(e, event, comment){\n            mixpanel.track('Add Comment', {\n                id : event._id\n            })\n        })\n\n        $rootScope.$on('add:event', function(e, data){\n            mixpanel.track('Add Event', {\n                id : data._id,\n                participants : data.participants.length,\n                comments  : data.comments.length,\n                isExample : data.isExample,\n                dates : data.dates.length\n            })\n        })\n\n    })();\n});\n","angular.module('rallly')\n.factory('ConfirmModal', function(btfModal){\n\n    return function(config){\n        var modal;\n        modal = btfModal({\n            templateUrl : 'templates/confirmmodal.html',\n            controllerAs : 'modal',\n            controller : function(){\n                this.title = config.title\n                this.message = config.message;\n                this.confirm = (config.confirm) ? function(){config.confirm(); modal.deactivate()} : false;\n                this.cancel = modal.deactivate;\n                this.confirmText = config.confirmText || 'Confirm';\n                this.cancelText = config.cancelText || 'Cancel';\n                this.isDestructive = config.isDestructive;\n            }\n        });\n        modal.activate();\n        \n        this.destroy = function(){\n            modal.deactivate();\n        }\n    }\n});\n","angular.module('rallly')\n.factory('Notification', function($timeout, btfModal){\n    return function(config){\n        var modal;\n        modal = btfModal({\n            templateUrl : 'templates/notification.html',\n            controllerAs : 'notification',\n            controller : function(){\n                this.title = config.title\n                this.message = config.message;\n                this.close = modal.deactivate;\n                this.type = config.type;\n                var timeout = config.timeout || 5000;\n                $timeout(modal.deactivate, timeout);\n            }\n        });\n        modal.activate();\n\n        this.destroy = function(){\n            modal.deactivate();\n        }\n    }\n});\n","angular.module('rallly').run(['$templateCache', function($templateCache) {$templateCache.put('templates/about.html','<div class=\"box\">\\n    <div class=\"box-title\">Frequently Asked Questions</div>\\n    <div class=\"box-description\">\\n        Want to find out more about Rallly? Check out the FAQs below.\\n    </div>    <h2>What is Rallly?</h2>\\n    <p>\\n        Rallly is a collaborative scheduling service that makes deciding on a date fast and easy. In other words, Rallly helps you and your friends decide on a date to host an event.\\n    </p>\\n    <h2>Why is it   called Rallly?</h2>\\n    <p>\\n        The name  is derived from the proper spelling of the word, &ldquo;rally&rdquo;. The Webster dictionary defines rally as, &ldquo;to muster for a common purpose&rdquo; which accurately describes the goal of this service. The inproper spelling can be attributed to the difficulty of finding short and meaningful domain names.\\n    </p>\\n    <h2>Who made this?</h2>\\n    <p>\\n        Rallly was created by <a href=\"http://lukevella.com\">Luke Vella</a>.\\n    </p>\\n</div>\\n');\n$templateCache.put('templates/confirmmodal.html','<div class=\"rl-modal-overlay\">\\n\\n<div class=\"rl-modal-position\">\\n\\n    <div class=\"rl-modal\">\\n        <div class=\"rl-modal-title\">{{modal.title}}</div>\\n        <div class=\"rl-modal-message\">\\n            {{modal.message}}\\n        </div>\\n        <div class=\"rl-modal-actions\">\\n            <button type=\"button\" ng-click=\"modal.confirm()\" ng-show=\"modal.confirm\" class=\"btn\" ng-class=\"{danger : modal.isDestructive}\">{{modal.confirmText}}</button>\\n            <button type=\"button\" ng-click=\"modal.cancel()\"  class=\"btn\">{{modal.cancelText}}</button>\\n        </div>\\n    </div>\\n\\n</div>\\n\\n</div>\\n');\n$templateCache.put('templates/deletedevent.html','<div class=\"box\">\\n    <div class=\"box-message\">\\n        <div class=\"main-image\">\\n            <img src=\"/images/bin.png\" width=\"100\" />\\n        </div>\\n        <div class=\"title\">Event Deleted</div>\\n        <div class=\"content\">\\n            This event has been deleted and is no longer accessible.\\n        </div>\\n    </div>\\n</div>\\n');\n$templateCache.put('templates/editevent.html','<div ng-show=\"event._id\">\\n    <div class=\"box\">\\n\\n        <div class=\"box-title\">Edit Event</div>\\n        <div class=\"box-description\">\\n            You can makes changes to your existing event by changing the fields in the form below.\\n        </div>\\n\\n        <form novalidate name=\"form\" ng-submit=\"submit()\">\\n\\n            <section class=\"box-section\" user-form form=\"form\" event=\"event\">\\n\\n            </section>\\n\\n            <section class=\"box-section\" event-form form=\"form\" event=\"event\">\\n\\n            </section>\\n            <section class=\"box-section\" date-form form=\"form\" event=\"event\">\\n\\n            </section>\\n\\n            <section class=\"box-section\" settings-form form=\"form\" event=\"event\">\\n\\n            </section>\\n\\n            <div class=\"box-controls box-bottom-sticky\">\\n                <button type=\"submit\" ng-show=\"didChange()\" class=\"btn btn-primary\" ng-class=\"{disabled : !didChange()}\">\\n                    Save Changes\\n                </button>\\n                <button type=\"button\" ng-click=\"undoChanges()\" class=\"btn\" ng-show=\"didChange()\">Undo Changes</button>\\n                <a href=\"/{{event._id}}\" class=\"btn\" ng-hide=\"didChange()\">Done</a>\\n            </div>\\n\\n        </form>\\n\\n    </div>\\n\\n</div>\\n');\n$templateCache.put('templates/event.html','<div ng-show=\"event._id\">\\n    <div class=\"box \">\\n        <div class=\"event-header\">\\n            <div class=\"details\">\\n                <div class=\"title\">\\n                    {{event.title}}\\n                    <span class=\"title-label danger\" ng-show=\"event.isClosed\">Poll Closed</span>\\n                    <span class=\"title-label success\" ng-hide=\"event.isClosed\">Poll Open</span>\\n                </div>\\n                <div class=\"subtitle\">\\n                    Created by <a href=\"mailto:{{event.creator.email}}\">{{event.creator.name}}</a>\\n                    &bull; {{event.created | elapsed}}\\n                    &bull; <a href=\"#\" ng-click=\"editEvent()\">Edit Details</a>\\n                </div>\\n            </div>\\n            <div class=\"actions\">\\n                <button class=\"btn\" ng-click=\"editEvent()\">Edit Event</button>\\n            </div>\\n        </div>\\n        <div class=\"event-description\" ng-if=\"event.description\" ng-bind-html=\"event.description | linky\"></div>\\n        <div class=\"event-location\" ng-if=\"event.location\">\\n            Location:\\n            <a  href=\"http://maps.google.com?q={{event.location}}\"  target=\"_blank\">{{event.location}}</a>\\n        </div>\\n\\n        <div class=\"poll-wrapper\">\\n            <div poll event=\"event\" class=\"poll\">\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\"box\" ng-hide=\"event.comments.length == 0 && event.isClosed\">\\n        <div class=\"box-title\">\\n            Discussion\\n        </div>\\n        <div class=\"box-description\">\\n            You can discuss the event with your friends by leaving a comment below.\\n        </div>\\n        <div discussion event=\"event\">\\n\\n        </div>\\n    </div>\\n</div>\\n');\n$templateCache.put('templates/home.html','<div class=\"page-placeholder\">\\n    <div class=\"image\">\\n        <img src=\"/images/mark_large.png\" width=\"67\" />\\n    </div>\\n    <div class=\"title\">\\n        Schedule an Event\\n    </div>\\n    <div class=\"content\">\\n        Want to host an event but can\\u2019t decide on a date? Click on the button below to start!\\n    </div>\\n    <button ng-click=\"newEvent()\" class=\"btn\">Schedule New Event</button>\\n</div>\\n');\n$templateCache.put('templates/newevent.html','<div class=\"box\">\\n    <div class=\"box-title\">Schedule a New Event</div>\\n    <div class=\"box-description\">\\n        Fill in the form below to create your event and share it with your friends and colleagues.\\n    </div>\\n    <form novalidate autocomplete=\"off\" name=\"form\" ng-hide=\"eventUrl\" ng-submit=\"submit()\">\\n        <section class=\"box-section\" user-form form=\"form\" event=\"event\">\\n\\n        </section>\\n\\n        <section class=\"box-section\" event-form form=\"form\" event=\"event\">\\n\\n        </section>\\n\\n        <section class=\"box-section\" date-form form=\"form\" event=\"event\">\\n\\n        </section>\\n\\n        <section class=\"box-section\" participants-form form=\"form\" event=\"event\">\\n\\n        </section>\\n\\n        <section class=\"box-section\" settings-form form=\"form\" event=\"event\">\\n\\n        </section>\\n\\n        <div class=\"box-controls box-bottom-sticky\">\\n            <button type=\"submit\" class=\"btn\">Create Event</button>\\n        </div>\\n\\n    </form>\\n    <div class=\"box-message animated zoomIn\" ng-show=\"eventUrl\">\\n        <div class=\"main-image\">\\n            <img src=\"/images/success_large.png\" width=\"100\" />\\n        </div>\\n        <div class=\"title\">Event Created</div>\\n        <div class=\"content\">\\n            Your event has been created successfully! An email has been sent to each participant with a link to the event page. \\n        </div>\\n        <div class=\"mini-divider\">\\n        </div>\\n        <div class=\"form-group\">\\n            <input type=\"text\" class=\"form-control\" disabled=\"true\" value=\"{{eventUrl}}\" />\\n            <a href=\"{{eventUrl}}\" class=\"btn form-btn\">GO</a>\\n        </div>\\n    </div>\\n</div>\\n');\n$templateCache.put('templates/notfound.html','<div class=\"not-found\">\\n    <video id=\"gfyVid1\" class=\"gfyVid\" width=\"480\" height=\"360\" autoplay=\"\" loop=\"\" muted=\"muted\" style=\"display: block;\" poster=\"//thumbs.gfycat.com/PaltryComfortableBaldeagle-poster.jpg\">\\n            <source id=\"webmsource\" src=\"//zippy.gfycat.com/PaltryComfortableBaldeagle.webm\" type=\"video/webm\">\\n            <source id=\"mp4source\" src=\"//zippy.gfycat.com/PaltryComfortableBaldeagle.mp4\" type=\"video/mp4\">\\n            Sorry, you don\\'t have HTML5 video and we didn\\'t catch this properly in javascript.\\n            You can try to view the gif directly: <a href=\"http://zippy.gfycat.com/PaltryComfortableBaldeagle.gif\">http://zippy.gfycat.com/PaltryComfortableBaldeagle.gif</a>.\\n        </video>\\n    <div class=\"overlay\">\\n        <div class=\"wrapper\">\\n            <div class=\"title\">Error 404 </div>\\n            <div class=\"description\">The page you are looking for could not be found!</h2>\\n            <div class=\"actions\">\\n                <a href=\"/\" target=\"_self\">Go to Homepage</a>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n');\n$templateCache.put('templates/notification.html','<div class=\"notification {{notification.type}}\" ng-click=\"notification.close()\">\\n    <div class=\"title\">\\n        {{notification.title}}\\n    </div>\\n    <div class=\"message\">\\n        {{notification.message}}\\n    </div>\\n</div>\\n');\n$templateCache.put('templates/directives/datePicker.html','<div class=\"date-picker\">\\n    <div class=\"wrapper\">\\n        <div class=\"date-picker-head\">\\n            <a href=\"#\" class=\"arrow\" ng-click=\"prevMonth()\">&#10094;</a>\\n            <span class=\"title\">\\n                <span class=\"title-text\">{{title}}</span>\\n            </span>\\n            <a href=\"#\" class=\"arrow\" ng-click=\"nextMonth()\">&#10095;</a>\\n        </div>\\n        <div class=\"dow\">\\n            <div class=\"day\">\\n                Su\\n            </div>\\n            <div class=\"day\">\\n                Mo\\n            </div>\\n            <div class=\"day\">\\n                Tu\\n            </div>\\n            <div class=\"day\">\\n                We\\n            </div>\\n            <div class=\"day\">\\n                Th\\n            </div>\\n            <div class=\"day\">\\n                Fr\\n            </div>\\n            <div class=\"day\">\\n                Sa\\n            </div>\\n        </div>\\n        <div class=\"values\">\\n            <div ng-repeat=\"day in days\" class=\"value\"  ng-class=\"{ outside : day.isOutsideMonth, today : day.isToday, active : isActive(day.date) }\" ng-click=\"selectDay(day)\">\\n                {{day.date | date : \\'d\\' }}\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n');\n$templateCache.put('templates/directives/discussion.html','<ul class=\"comment-thread\" ng-show=\"event.comments.length\">\\n    <li ng-repeat=\"comment in event.comments\" class=\"comment\">\\n        <div class=\"avatar-section\">\\n            <img src=\"/images/avatar.png\" />\\n        </div>\\n        <div class=\"comment-section\">\\n            <a href=\"#\" class=\"comment-delete\" ng-click=\"discussionCtrl.deleteComment(comment)\">&times;</a>\\n            <div class=\"meta\">\\n                <span class=\"name\">{{comment.author.name}}</span>\\n                <span class=\"time\">{{comment.created | elapsed}}</span>\\n            </div>\\n            <div class=\"content\" ng-bind-html=\"comment.content | linky\"></div>\\n        </div>\\n    </li>\\n</ul>\\n<form novalidate ng-submit=\"discussionCtrl.postComment()\" name=\"commentForm\" class=\"comment-form\">\\n    <div class=\"avatar-section\">\\n        <img src=\"/images/avatar.png\" />\\n    </div>\\n    <div class=\"input-section form-group\">\\n        <div class=\"content-section\">\\n            <textarea class=\"form-control\" required ng-model=\"comment.content\" placeholder=\"Write a comment...\"></textarea>\\n        </div>\\n        <div class=\"name-section\">\\n            <div class=\"name-container\">\\n                <input type=\"text\" class=\"form-control\" required placeholder=\"Your Name\" ng-model=\"comment.author.name\" />\\n                <button type=\"submit\" class=\"btn\">Post Comment</button>\\n                <span class=\"form-error\" ng-show=\"commentForm.$submitted && commentForm.$error\">\\n                    <img src=\"/images/error.png\" width=\"14\" /> Make sure you fill in all the fields.\\n                </span>\\n            </div>\\n        </div>\\n    </div>\\n</form>\\n');\n$templateCache.put('templates/directives/poll.html','<div class=\"poll-header\">\\n    <div class=\"header participants-header\">\\n        {{event.participants.length}} participants\\n    </div>\\n    <div class=\"header date-header\" ng-repeat=\"d in event.dates\">\\n        <div class=\"daticon\">\\n            <div class=\"dow\">\\n                {{d | date: \\'EEE\\'}}\\n            </div>\\n            <div class=\"day\">\\n                {{d | date: \\'d\\'}}\\n            </div>\\n            <div class=\"month\">\\n                {{d | date : \\'MMM\\'}}\\n            </div>\\n            <span class=\"count\" ng-show=\"selectedDate($index)\" ng-class={top:isTopDate($index)}>{{selectedDate($index)}}</span>\\n        </div>\\n    </div>\\n    <div class=\"header actions-header\">\\n\\n    </div>\\n</div>\\n<div class=\"poll-body\">\\n    <div class=\"poll-entry\" ng-repeat=\"participant in event.participants\">\\n        <form novalidate ng-submit=\"editMode = false; pollCtrl.update(participant);\">\\n            <div class=\"cell name-cell\">\\n                <span class=\"avatar style-{{($index % 10) + 1 }}\">\\n                    <img src=\"/images/user.png\" width=\"11\" />\\n                </span>\\n                <input required autocomplete=\"off\" type=\"text\" class=\"form-control\" ng-model=\"participant.name\" ng-show=\"editMode\" value=\"participant.name\"/>\\n                <span ng-hide=\"editMode\" class=\"name editable\" ng-click=\"editMode = true && !event.isClosed; pollCtrl.edit(participant)\">{{participant.name}}</span>\\n            </div>\\n            <div class=\"cell vote-cell\" ng-repeat=\"date in event.dates\">\\n                <img src=\"/images/question.png?34\"  width=\"16\" ng-if=\"!participant.votes[$index]\" />\\n                <img src=\"/images/nope@2x.png\"  width=\"16\"  ng-if=\"participant.votes[$index] === 1\" />\\n                <img src=\"/images/tick@2x.png\"  width=\"16\"  ng-if=\"participant.votes[$index] === 2\" />\\n                <img src=\"/images/heart.png?3\"  width=\"16\"  ng-if=\"participant.votes[$index] === 3\" />\\n                <div class=\"overlay\" ng-show=\"editMode\" ng-click=\"participant.votes[$index] = (((participant.votes[$index] || 0) + 1) % 4) \"></div>\\n            </div>\\n            <div class=\"cell action-cell\" ng-hide=\"event.isClosed\">\\n                <button type=\"button\" ng-hide=\"editMode\" ng-click=\"editMode = true; pollCtrl.edit(participant)\" class=\"btn hover\">Edit</button>\\n                <button type=\"button\" ng-hide=\"editMode\" ng-click=\"pollCtrl.delete(participant)\" class=\"btn danger hover\">Delete</button>\\n                <button type=\"submit\" ng-show=\"editMode\" class=\"btn\">Save</button>\\n                <button type=\"button\" ng-show=\"editMode\" ng-click=\"editMode = false; pollCtrl.cancel($index)\" class=\"btn\">Cancel</button>\\n            </div>\\n        </form>\\n    </div>\\n    <div class=\"poll-example\" ng-class=\"{hidden : event.participants.length > 0}\">\\n        <div class=\"poll-entry\" ng-repeat=\"example in examples\">\\n            <div class=\"cell name-cell\">\\n                <span class=\"avatar style-{{$index + 1}}\">\\n                    <img src=\"/images/user.png\" width=\"11\" />\\n                </span>\\n                <span class=\"name\">{{example.name}}</span>\\n            </div>\\n            <div class=\"cell vote-cell\" ng-repeat=\"date in event.dates\">\\n                <img src=\"/images/question.png\" width=\"8\" ng-if=\"!example.votes[$index]\" />\\n                <img src=\"/images/nope@2x.png\"  width=\"16\" ng-if=\"example.votes[$index] === 1\" />\\n                <img src=\"/images/tick@2x.png\"  width=\"16\" ng-if=\"example.votes[$index] === 2\" />\\n                <img src=\"/images/heart.png?3\"  width=\"16\" ng-if=\"example.votes[$index] === 3\" />\\n            </div>\\n            <div class=\"cell action-cell\">\\n\\n            </div>\\n        </div>\\n        <div class=\"overlay\">\\n            <div class=\"overlay-text\">\\n                Fill in the form below to get started\\n            </div>\\n        </div>\\n    </div>\\n    <div ng-hide=\"event.isClosed\" class=\"poll-entry highlight\">\\n        <form novalidate name=\"formnew\" ng-submit=\"pollCtrl.save()\">\\n            <div class=\"cell name-cell\">\\n                <span class=\"avatar style-{{participant.style}}\">\\n                    <img src=\"/images/user.png\" width=\"11\" />\\n                </span>\\n                <input autocomplete=\"off\" name=\"username\" type=\"text\" class=\"form-control\" placeholder=\"Enter name, then click\" ng-model=\"participant.name\" required value=\"participant.name\"/>\\n            </div>\\n            <div class=\"cell vote-cell\" ng-repeat=\"date in event.dates\">\\n                <img src=\"/images/question.png?34\"  width=\"16\" n-hide=\"editMode\" ng-if=\"!participant.votes[$index]\" />\\n                <img src=\"/images/nope@2x.png\"  width=\"16\" n-hide=\"editMode\" ng-if=\"participant.votes[$index] === 1\" />\\n                <img src=\"/images/tick@2x.png\"  width=\"16\" n-hide=\"editMode\" ng-if=\"participant.votes[$index] === 2\" />\\n                <img src=\"/images/heart.png?3\"  width=\"16\" n-hide=\"editMode\" ng-if=\"participant.votes[$index] === 3\" />\\n                <div class=\"overlay\" ng-click=\"participant.votes[$index] = (((participant.votes[$index] || 0) + 1) % 4) \"></div>\\n            </div>\\n            <div class=\"cell action-cell\">\\n                <button type=\"submit\" ng-class=\"{ \\'animated shake\\' : formnew.$submitted && formnew.$invalid  }\" class=\"btn\">Save</button>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n');\n$templateCache.put('templates/directives/timePicker.html','<div class=\"time-picker\">\\n    <div class=\"time-picker-col\">\\n        <div class=\"daticon\">\\n            <div class=\"dow\">\\n                {{date | date: \\'EEE\\'}}\\n            </div>\\n            <div class=\"day\">\\n                {{date | date: \\'d\\'}}\\n            </div>\\n            <div class=\"month\">\\n                {{date | date : \\'MMM\\'}}\\n            </div>\\n            <!-- <span class=\"delete\" ng-click=\"datepicker.unsetDate(date)\"></span> -->\\n        </div>\\n    </div>\\n    <div class=\"time-picker-col\" ng-repeat=\"time in date.times track by $index\">\\n        <input type=\"text\" class=\"time-picker-input\" time-picker ng-model=\"time\" ng-model-options=\"{ updateOn: \\'blur\\' }\" />\\n    </div>\\n</div>\\n');\n$templateCache.put('templates/form/dateForm.html','<div class=\"section-details\">\\n    <div class=\"section-title\">Choose Dates</div>\\n    <ul class=\"daticon-list\">\\n        <li ng-repeat=\"d in event.dates\">\\n            <div class=\"daticon\">\\n                <div class=\"dow\">\\n                    {{d | date: \\'EEE\\'}}\\n                </div>\\n                <div class=\"day\">\\n                    {{d | date: \\'d\\'}}\\n                </div>\\n                <div class=\"month\">\\n                    {{d | date : \\'MMM\\'}}\\n                </div>\\n                <span class=\"delete\" ng-click=\"datepicker.removeDate(d)\"></span>\\n            </div>\\n        </li>\\n    </ul>\\n</div>\\n<div class=\"section-main\">\\n    <div class=\"form-row\">\\n        <div class=\"form-group\">\\n            <label for=\"email\">Calendar</label>\\n            <span class=\"form-error\" ng-show=\"form.$submitted && form.datepicker.$error.required\">\\n                <img src=\"/images/error.png\" width=\"14\" /> You need to select a few dates\\n            </span>\\n            <div datepicker required name=\"datepicker\" control=\"datepicker\" ng-model=\"event.dates\">\\n\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n');\n$templateCache.put('templates/form/eventForm.html','<div class=\"section-details\">\\n    <div class=\"section-title\">Event Details</div>\\n</div>\\n<div class=\"section-main\">\\n    <div class=\"form-row\">\\n        <div class=\"form-col\">\\n            <div class=\"form-group\">\\n                <label for=\"title\">Title</label>\\n                <span class=\"form-error\" ng-show=\"(form.title.$touched || form.$submitted) && errors.title\">\\n                    <img src=\"/images/error.png\" width=\"14\" /> {{errors.title}}\\n                </span>\\n                <input id=\"title\" name=\"title\" ng-maxlength=\"30\" required ng-model=\"event.title\" type=\"text\" placeholder=\"Monthly Meetup...\" class=\"form-control extend\"/>\\n            </div>\\n        </div>\\n        <div class=\"form-col\">\\n            <div class=\"form-group optional\">\\n                <label for=\"location\">Location</label>\\n                <span class=\"form-error\" ng-show=\"(form.location.$touched || form.$submitted) && errors.location\">\\n                    <img src=\"/images/error.png\" width=\"14\" /> {{errors.location}}\\n                </span>\\n                <input id=\"location\" name=\"location\" ng-model=\"event.location\" ng-maxlength=\"50\" type=\"text\" placeholder=\"Rick\\'s Cafe...\" class=\"form-control extend\"/>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\"form-row\">\\n        <div class=\"form-group optional\">\\n            <label for=\"description\" >Description</label>\\n            <textarea id=\"description\" name=\"description\" ng-model=\"event.description\" placeholder=\"Enter Description...\" class=\"form-control extend\"></textarea>\\n        </div>\\n    </div>\\n</div>\\n');\n$templateCache.put('templates/form/participantsForm.html','<div class=\"section-details\">\\n    <div class=\"section-title\">Invite Participants</div>\\n</div>\\n<div class=\"section-main\">\\n    <div class=\"form-row\">\\n        <div class=\"form-group optional\">\\n            <label>Participant\\'s Emails</label>\\n            <tags-input max-length=\"50\" allowed-tags-pattern=\"{{emailRegex}}\" display-property=\"email\" ng-model=\"event.emails\" placeholder=\"Add an Email\" type=\"email\" autocomplete=\"off\"></tags-input>\\n            <input type=\"hidden\" name=\"shouldCreate\" value=\"true\" />\\n\\n        </div>\\n    </div>\\n</div>\\n');\n$templateCache.put('templates/form/settingsForm.html','<div class=\"section-details\">\\n    <div class=\"section-title\">Settings</div>\\n</div>\\n<div class=\"section-main\">\\n    <div class=\"switch-row\" ng-if=\"event._id\">\\n        <div class=\"switch-details\">\\n            <div class=\"title\">\\n                Poll Status\\n            </div>\\n            <div class=\"description\">\\n                Let people vote on the poll.\\n            </div>\\n        </div>\\n        <div class=\"switch\">\\n            <div class=\"switch-value\">\\n                {{event.isClosed ? \\'Closed\\' : \\'Open\\' }}\\n            </div>\\n            <div switch-toggle ng-model=\"event.isClosed\" invert>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\"switch-row\">\\n        <div class=\"switch-details\">\\n            <div class=\"title\">\\n                Notifications\\n            </div>\\n            <div class=\"description\">\\n                Send me an email when someone votes or comments on the event.\\n            </div>\\n        </div>\\n        <div class=\"switch\">\\n            <div class=\"switch-value\">\\n                {{event.creator.allowNotifications ? \\'Enabled\\' : \\'Disabled\\' }}\\n            </div>\\n            <div switch-toggle ng-model=\"event.creator.allowNotifications\">\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\"switch-row\" ng-if=\"event._id\">\\n        <div class=\"switch-details\">\\n            <div class=\"title\">\\n                Delete Event\\n            </div>\\n            <div class=\"description\">\\n                Once you delete an event it will no longer be accessible.\\n            </div>\\n        </div>\\n        <div class=\"switch\">\\n            <button type=\"button\" ng-click=\"deleteEvent()\" class=\"btn\" ng-class=\"{danger : !deleteRequestSent, disabled : deleteRequestSent}\">{{deleteRequestSent ? \\'Request Sent\\' : \\'Delete Event\\' }}</button>\\n        </div>\\n    </div>\\n</div>\\n</section>\\n');\n$templateCache.put('templates/form/timeForm.html','<div class=\"section-details\">\\n    <div class=\"section-title\">Choose Times</div>\\n</div>\\n<div class=\"section-main\">\\n    <table class=\"time-form\">\\n        <thead>\\n            <tr>\\n                <th>\\n\\n                </th>\\n                <th>\\n                    Time 1\\n                </th>\\n                <th>\\n                    Time 2\\n                </th>\\n                <th>\\n                    Time 3\\n                </th>\\n            </tr>\\n        </thead>\\n        <tbody>\\n            <tr ng-repeat=\"d in event.dates\">\\n                <td>\\n                    <div class=\"daticon\">\\n                        <div class=\"dow\">\\n                            {{d.date | date: \\'EEE\\'}}\\n                        </div>\\n                        <div class=\"day\">\\n                            {{d.date | date: \\'d\\'}}\\n                        </div>\\n                        <div class=\"month\">\\n                            {{d.date | date : \\'MMM\\'}}\\n                        </div>\\n                        <span class=\"delete\" ng-click=\"unsetDate(d.date)\"></span>\\n                    </div>\\n                </td>\\n                <td ng-repeat=\"time in [1,2,3] track by $index\">\\n                    <input type=\"text\" time-picker ng-model-options=\"{ updateOn: \\'blur\\' }\" ng-model=\"d.times[$index]\" class=\"time-picker-input\" />\\n                </td>\\n            </tr>\\n        </tbody>\\n    </table>\\n</div>\\n');\n$templateCache.put('templates/form/userForm.html','<div class=\"section-details\">\\n    <div class=\"section-title\">Your Details</div>\\n</div>\\n<div class=\"section-main\">\\n    <div class=\"form-row\">\\n        <div class=\"form-col\">\\n            <div class=\"form-group\">\\n                <label for=\"name\">Name</label>\\n                <span class=\"form-error\" ng-show=\"(form.name.$touched || form.$submitted) && errors.name\">\\n                    <img src=\"/images/error.png\" width=\"14\" /> {{errors.name}}\\n                </span>\\n                <input id=\"name\" name=\"name\" ng-maxlength=\"30\" required ng-model=\"event.creator.name\" type=\"text\" placeholder=\"John Doe...\" class=\"form-control extend\"/>\\n            </div>\\n        </div>\\n        <div class=\"form-col\">\\n            <div class=\"form-group\">\\n                <label for=\"email\">Email</label>\\n                <span class=\"form-error\" ng-show=\"(form.email.$touched || form.$submitted) && errors.email\">\\n                    <img src=\"/images/error.png\" width=\"14\" /> {{errors.email}}\\n                </span>\\n                <input type=\"email\" id=\"email\" name=\"email\" ng-pattern=\"emailRegex\" required ng-model=\"event.creator.email\" placeholder=\"john.doe@email.com...\" class=\"form-control extend\"/>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n');}]);"]}